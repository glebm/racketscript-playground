import * as $rjs_core from './core.js';import * as $$mod from "./kernel.js";var $$ = $$mod.exports;var error = $$["error"];var list_p = $$["list?"];var _by_ = $$["/"];var foldl = $$["foldl"];var length = $$["length"];var make_immutable_hash = $$["make-immutable-hash"];var string_eq__p = $$["string=?"];var print_values = $$["print-values"];var remainder = $$["remainder"];var zero_p = $$["zero?"];var reverse = $$["reverse"];var first = $$["first"];var make_struct_type_property = $$["make-struct-type-property"];var struct_type_p = $$["struct-type?"];var list = $$["list"];var hash_ref = $$["hash-ref"];var _plus_ = $$["+"];var car = $$["car"];var vector_ref = $$["vector-ref"];var make_struct_field_mutator = $$["make-struct-field-mutator"];var displayln = $$["displayln"];var pair_p = $$["pair?"];var symbol__gt_string = $$["symbol->string"];var list_ref = $$["list-ref"];var empty = $$["empty"];var map = $$["map"];var eq_p = $$["eq?"];var make_struct_field_accessor = $$["make-struct-field-accessor"];var round = $$["round"];var ceiling = $$["ceiling"];var append = $$["append"];var newline = $$["newline"];var positive_p = $$["positive?"];var ormap = $$["ormap"];var _ = $$["-"];var cdr = $$["cdr"];var string_append = $$["string-append"];var add1 = $$["add1"];var empty_p = $$["empty?"];var vector = $$["vector"];var make_list = $$["make-list"];var sub1 = $$["sub1"];var values = $$["values"];var flatten = $$["flatten"];var assoc = $$["assoc"];var random = $$["random"];var eqv_p = $$["eqv?"];var call_with_values = $$["call-with-values"];var hash_set = $$["hash-set"];var floor = $$["floor"];var format = $$["format"];var string_p = $$["string?"];var max = $$["max"];var symbol_p = $$["symbol?"];var rfalse = $$["false"];var rnull = $$["null"];var _eq_ = $$["="];var sqr = $$["sqr"];var for_each = $$["for-each"];var negative_p = $$["negative?"];var rtrue = $$["true"];var current_seconds = $$["current-seconds"];var _lt__eq_ = $$["<="];var filter = $$["filter"];var _gt_ = $$[">"];var foldr = $$["foldr"];var apply = $$["apply"];var new_apply_proc=apply;var member = $$["member"];var compose = $$["compose"];var false_p = $$["false?"];var number__gt_string = $$["number->string"];var cons = $$["cons"];var string = $$["string"];var vector_p = $$["vector?"];var build_list = $$["build-list"];var rvoid = $$["void"];var second = $$["second"];var vector_length = $$["vector-length"];var list_times_ = $$["list*"];var not = $$["not"];var quotient = $$["quotient"];var _times_ = $$["*"];var vector_set_bang_ = $$["vector-set!"];var _lt_ = $$["<"];var display = $$["display"];var raise_argument_error = $$["raise-argument-error"];var void_p = $$["void?"];var hash = $$["hash"];var current_inspector = $$["current-inspector"];var compose1 = $$["compose1"];var integer_p = $$["integer?"];var min = $$["min"];var number_p = $$["number?"];var set_box_bang_ = $$["set-box!"];var hasheq = $$["hasheq"];var make_struct_type = $$["make-struct-type"];var unbox = $$["unbox"];var rest = $$["rest"];var cons_p = $$["cons?"];var andmap = $$["andmap"];var null_p = $$["null?"];var box = $$["box"];var abs = $$["abs"];var symbol_eq__p = $$["symbol=?"];var equal_p = $$["equal?"];var _gt__eq_ = $$[">="]; var check_struct_type=$$["check-struct-type"];var check_method=$$["check-method"]; export { error,list_p,_by_,foldl,length,make_immutable_hash,string_eq__p,print_values,remainder,zero_p,reverse,first,make_struct_type_property,struct_type_p,list,hash_ref,_plus_,car,vector_ref,make_struct_field_mutator,displayln,pair_p,symbol__gt_string,list_ref,empty,map,eq_p,make_struct_field_accessor,round,ceiling,append,newline,positive_p,ormap,_,cdr,string_append,add1,empty_p,vector,make_list,sub1,values,flatten,assoc,random,eqv_p,call_with_values,hash_set,floor,format,string_p,max,symbol_p,rfalse,rnull,_eq_,sqr,for_each,negative_p,rtrue,current_seconds,_lt__eq_,filter,_gt_,foldr,new_apply_proc,apply,member,compose,false_p,number__gt_string,cons,string,vector_p,build_list,rvoid,second,vector_length,list_times_,not,quotient,_times_,vector_set_bang_,_lt_,display,raise_argument_error,void_p,hash,current_inspector,compose1,integer_p,min,number_p,set_box_bang_,hasheq,make_struct_type,unbox,rest,cons_p,andmap,null_p,box,abs,symbol_eq__p,equal_p,_gt__eq_,check_struct_type,check_method };
