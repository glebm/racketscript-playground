import * as $rjs_core from './core.js';import * as $$mod from "./kernel.js";var $$ = $$mod.exports;var error = $$["error"];var hash = $$["hash"];var false_p = $$["false?"];var _by_ = $$["/"];var reverse = $$["reverse"];var make_immutable_hash = $$["make-immutable-hash"];var hasheq = $$["hasheq"];var string_eq__p = $$["string=?"];var rfalse = $$["false"];var string_append = $$["string-append"];var zero_p = $$["zero?"];var first = $$["first"];var member = $$["member"];var list = $$["list"];var string = $$["string"];var make_struct_type = $$["make-struct-type"];var rest = $$["rest"];var round = $$["round"];var length = $$["length"];var empty = $$["empty"];var vector_ref = $$["vector-ref"];var make_struct_field_accessor = $$["make-struct-field-accessor"];var list_p = $$["list?"];var format = $$["format"];var positive_p = $$["positive?"];var quotient = $$["quotient"];var vector = $$["vector"];var min = $$["min"];var vector_p = $$["vector?"];var make_struct_field_mutator = $$["make-struct-field-mutator"];var ceiling = $$["ceiling"];var random = $$["random"];var rtrue = $$["true"];var map = $$["map"];var sub1 = $$["sub1"];var hash_set = $$["hash-set"];var ormap = $$["ormap"];var floor = $$["floor"];var display = $$["display"];var _gt_ = $$[">"];var build_list = $$["build-list"];var rvoid = $$["void"];var displayln = $$["displayln"];var car = $$["car"];var unbox = $$["unbox"];var rnull = $$["null"];var add1 = $$["add1"];var for_each = $$["for-each"];var empty_p = $$["empty?"];var negative_p = $$["negative?"];var current_inspector = $$["current-inspector"];var foldl = $$["foldl"];var cons_p = $$["cons?"];var foldr = $$["foldr"];var void_p = $$["void?"];var list_ref = $$["list-ref"];var raise_argument_error = $$["raise-argument-error"];var _lt__eq_ = $$["<="];var pair_p = $$["pair?"];var cons = $$["cons"];var eqv_p = $$["eqv?"];var struct_type_p = $$["struct-type?"];var cdr = $$["cdr"];var vector_length = $$["vector-length"];var vector_set_bang_ = $$["vector-set!"];var filter = $$["filter"];var _eq_ = $$["="];var abs = $$["abs"];var not = $$["not"];var _times_ = $$["*"];var append = $$["append"];var call_with_values = $$["call-with-values"];var newline = $$["newline"];var integer_p = $$["integer?"];var _ = $$["-"];var max = $$["max"];var _plus_ = $$["+"];var make_struct_type_property = $$["make-struct-type-property"];var set_box_bang_ = $$["set-box!"];var _lt_ = $$["<"];var values = $$["values"];var hash_ref = $$["hash-ref"];var andmap = $$["andmap"];var number_p = $$["number?"];var print_values = $$["print-values"];var number__gt_string = $$["number->string"];var null_p = $$["null?"];var _gt__eq_ = $$[">="];var box = $$["box"];var eq_p = $$["eq?"];var equal_p = $$["equal?"];var new_apply_proc = $$["apply"];var apply=$$["apply"];var check_method=$$["check-method"];var check_struct_type=$$["check-struct-type"];export { error,hash,false_p,_by_,reverse,make_immutable_hash,hasheq,string_eq__p,rfalse,string_append,zero_p,first,member,list,string,make_struct_type,rest,round,length,empty,vector_ref,make_struct_field_accessor,list_p,format,positive_p,quotient,vector,min,vector_p,make_struct_field_mutator,ceiling,random,rtrue,map,sub1,apply,hash_set,ormap,floor,display,_gt_,build_list,rvoid,displayln,car,unbox,rnull,add1,for_each,empty_p,negative_p,current_inspector,foldl,cons_p,foldr,void_p,list_ref,raise_argument_error,_lt__eq_,pair_p,cons,eqv_p,struct_type_p,cdr,vector_length,vector_set_bang_,filter,_eq_,abs,not,_times_,append,call_with_values,newline,integer_p,_,max,_plus_,make_struct_type_property,set_box_bang_,_lt_,values,hash_ref,andmap,number_p,print_values,number__gt_string,null_p,_gt__eq_,box,eq_p,equal_p,new_apply_proc,check_method,check_struct_type };
